/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DrivingAppService } from "../drivingApp.service";
import { DrivingAppCreateInput } from "./DrivingAppCreateInput";
import { DrivingApp } from "./DrivingApp";
import { DrivingAppFindManyArgs } from "./DrivingAppFindManyArgs";
import { DrivingAppWhereUniqueInput } from "./DrivingAppWhereUniqueInput";
import { DrivingAppUpdateInput } from "./DrivingAppUpdateInput";

export class DrivingAppControllerBase {
  constructor(protected readonly service: DrivingAppService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DrivingApp })
  async createDrivingApp(
    @common.Body() data: DrivingAppCreateInput
  ): Promise<DrivingApp> {
    return await this.service.createDrivingApp({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DrivingApp] })
  @ApiNestedQuery(DrivingAppFindManyArgs)
  async drivingApps(@common.Req() request: Request): Promise<DrivingApp[]> {
    const args = plainToClass(DrivingAppFindManyArgs, request.query);
    return this.service.drivingApps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DrivingApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drivingApp(
    @common.Param() params: DrivingAppWhereUniqueInput
  ): Promise<DrivingApp | null> {
    const result = await this.service.drivingApp({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DrivingApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrivingApp(
    @common.Param() params: DrivingAppWhereUniqueInput,
    @common.Body() data: DrivingAppUpdateInput
  ): Promise<DrivingApp | null> {
    try {
      return await this.service.updateDrivingApp({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DrivingApp })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrivingApp(
    @common.Param() params: DrivingAppWhereUniqueInput
  ): Promise<DrivingApp | null> {
    try {
      return await this.service.deleteDrivingApp({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
