/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DrivingApp as PrismaDrivingApp } from "@prisma/client";

export class DrivingAppServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DrivingAppCountArgs, "select">
  ): Promise<number> {
    return this.prisma.drivingApp.count(args);
  }

  async drivingApps(
    args: Prisma.DrivingAppFindManyArgs
  ): Promise<PrismaDrivingApp[]> {
    return this.prisma.drivingApp.findMany(args);
  }
  async drivingApp(
    args: Prisma.DrivingAppFindUniqueArgs
  ): Promise<PrismaDrivingApp | null> {
    return this.prisma.drivingApp.findUnique(args);
  }
  async createDrivingApp(
    args: Prisma.DrivingAppCreateArgs
  ): Promise<PrismaDrivingApp> {
    return this.prisma.drivingApp.create(args);
  }
  async updateDrivingApp(
    args: Prisma.DrivingAppUpdateArgs
  ): Promise<PrismaDrivingApp> {
    return this.prisma.drivingApp.update(args);
  }
  async deleteDrivingApp(
    args: Prisma.DrivingAppDeleteArgs
  ): Promise<PrismaDrivingApp> {
    return this.prisma.drivingApp.delete(args);
  }
}
