/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DailyIncomeService } from "../dailyIncome.service";
import { DailyIncomeCreateInput } from "./DailyIncomeCreateInput";
import { DailyIncome } from "./DailyIncome";
import { DailyIncomeFindManyArgs } from "./DailyIncomeFindManyArgs";
import { DailyIncomeWhereUniqueInput } from "./DailyIncomeWhereUniqueInput";
import { DailyIncomeUpdateInput } from "./DailyIncomeUpdateInput";

export class DailyIncomeControllerBase {
  constructor(protected readonly service: DailyIncomeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DailyIncome })
  async createDailyIncome(
    @common.Body() data: DailyIncomeCreateInput
  ): Promise<DailyIncome> {
    return await this.service.createDailyIncome({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DailyIncome] })
  @ApiNestedQuery(DailyIncomeFindManyArgs)
  async dailyIncomes(@common.Req() request: Request): Promise<DailyIncome[]> {
    const args = plainToClass(DailyIncomeFindManyArgs, request.query);
    return this.service.dailyIncomes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DailyIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dailyIncome(
    @common.Param() params: DailyIncomeWhereUniqueInput
  ): Promise<DailyIncome | null> {
    const result = await this.service.dailyIncome({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DailyIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDailyIncome(
    @common.Param() params: DailyIncomeWhereUniqueInput,
    @common.Body() data: DailyIncomeUpdateInput
  ): Promise<DailyIncome | null> {
    try {
      return await this.service.updateDailyIncome({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DailyIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDailyIncome(
    @common.Param() params: DailyIncomeWhereUniqueInput
  ): Promise<DailyIncome | null> {
    try {
      return await this.service.deleteDailyIncome({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
